const Parser = require(‘rss-parser’);
const fetch = require(‘node-fetch’);

const parser = new Parser({
customFields: {
item: [‘description’, ‘content:encoded’, ‘pubDate’]
}
});

// B1クラブと日本代表のRSSフィード
const RSS_FEEDS = [
{
  
id: ‘japan’,
name: ‘日本代表’,
url: ‘https://www.japanbasketball.jp/feed/’,
teamId: ‘japan’
},
{
id: ‘alvark’,
name: ‘アルバルク東京’,
url: ‘https://www.alvark-tokyo.jp/feed/’,
teamId: ‘alvark’
},
{
id: ‘levanga’,
name: ‘レバンガ北海道’,
url: ‘https://levanga.com/feed/’,
teamId: ‘levanga’
},
{
id: ‘akita’,
name: ‘秋田ノーザンハピネッツ’,
url: ‘https://www.northern-happinets.com/feed/’,
teamId: ‘akita’
},
{
id: ‘sendai’,
name: ‘仙台89ERS’,
url: ‘https://www.89ers.jp/feed/’,
teamId: ‘sendai’
},
{
id: ‘gunma’,
name: ‘群馬クレインサンダーズ’,
url: ‘https://gunma-cranesports.com/feed/’,
teamId: ‘gunma’
},
{
id: ‘utsunomiya’,
name: ‘宇都宮ブレックス’,
url: ‘https://www.brex.jp/feed/’,
teamId: ‘utsunomiya’
},
{
id: ‘chiba’,
name: ‘千葉ジェッツ’,
url: ‘https://chibajets.jp/feed/’,
teamId: ‘chiba’
},
{
id: ‘kawasaki’,
name: ‘川崎ブレイブサンダース’,
url: ‘https://www.kawasaki-brave-thunders.com/feed/’,
teamId: ‘kawasaki’
},
{
id: ‘yokohama’,
name: ‘横浜ビー・コルセアーズ’,
url: ‘https://www.b-corsairs.com/feed/’,
teamId: ‘yokohama’
},
{
id: ‘niigata’,
name: ‘新潟アルビレックスBB’,
url: ‘https://www.albirex.com/basketball/feed/’,
teamId: ‘niigata’
},
{
id: ‘toyama’,
name: ‘富山グラウジーズ’,
url: ‘https://www.grouses.jp/feed/’,
teamId: ‘toyama’
},
{
id: ‘sunrockers’,
name: ‘サンロッカーズ渋谷’,
url: ‘https://www.sunrockers.org/feed/’,
teamId: ‘sunrockers’
},
{
id: ‘nagoya’,
name: ‘名古屋ダイヤモンドドルフィンズ’,
url: ‘https://www.nagoya-dolphins.jp/feed/’,
teamId: ‘nagoya’
},
{
id: ‘seahorses’,
name: ‘シーホース三河’,
url: ‘https://www.seahorses-mikawa.com/feed/’,
teamId: ‘seahorses’
},
{
id: ‘shiga’,
name: ‘滋賀レイクス’,
url: ‘https://www.lakestars.net/feed/’,
teamId: ‘shiga’
},
{
id: ‘kyoto’,
name: ‘京都ハンナリーズ’,
url: ‘https://hannaryz.com/feed/’,
teamId: ‘kyoto’
},
{
id: ‘osaka’,
name: ‘大阪エヴェッサ’,
url: ‘https://evessa.com/feed/’,
teamId: ‘osaka’
},
{
id: ‘shimane’,
name: ‘島根スサノオマジック’,
url: ‘https://www.susanoo-m.com/feed/’,
teamId: ‘shimane’
},
{
id: ‘hiroshima’,
name: ‘広島ドラゴンフライズ’,
url: ‘https://www.hiroshima-dragonflies.com/feed/’,
teamId: ‘hiroshima’
},
{
id: ‘ryukyu’,
name: ‘琉球ゴールデンキングス’,
url: ‘https://goldenkings.jp/feed/’,
teamId: ‘ryukyu’
}
];

async function fetchFeedWithTimeout(url, timeout = 5000) {
const controller = new AbortController();
const timeoutId = setTimeout(() => controller.abort(), timeout);

try {
const feed = await parser.parseURL(url, { signal: controller.signal });
clearTimeout(timeoutId);
return feed;
} catch (error) {
clearTimeout(timeoutId);
throw error;
}
}

exports.handler = async (event, context) => {
// CORSヘッダーを設定
const headers = {
‘Access-Control-Allow-Origin’: ‘*’,
‘Access-Control-Allow-Headers’: ‘Content-Type’,
‘Access-Control-Allow-Methods’: ‘GET, OPTIONS’,
‘Content-Type’: ‘application/json’,
‘Cache-Control’: ‘public, max-age=300’ // 5分間キャッシュ
};

// OPTIONSリクエスト（プリフライト）への対応
if (event.httpMethod === ‘OPTIONS’) {
return {
statusCode: 200,
headers,
body: ‘’
};
}

try {
const allNews = [];

```
// 全フィードを並行取得
const feedPromises = RSS_FEEDS.map(async (feed) => {
  try {
    const parsedFeed = await fetchFeedWithTimeout(feed.url);
    
    return parsedFeed.items.slice(0, 10).map((item, index) => ({
      id: `${feed.id}-${index}-${Date.now()}`,
      team: feed.teamId,
      teamName: feed.name,
      title: item.title || 'タイトルなし',
      date: item.pubDate ? new Date(item.pubDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
      source: `${feed.name}公式`,
      url: item.link || '#',
      excerpt: (item.contentSnippet || item.description || '').replace(/<[^>]*>/g, '').slice(0, 150) + '...'
    }));
  } catch (error) {
    console.error(`Error fetching ${feed.name}:`, error.message);
    return [];
  }
});

const results = await Promise.all(feedPromises);
results.forEach(news => allNews.push(...news));

// 日付でソート（新しい順）
allNews.sort((a, b) => new Date(b.date) - new Date(a.date));

return {
  statusCode: 200,
  headers,
  body: JSON.stringify({
    news: allNews,
    lastUpdated: new Date().toISOString()
  })
};
```

} catch (error) {
console.error(‘Error:’, error);
return {
statusCode: 500,
headers,
body: JSON.stringify({
error: ‘ニュースの取得に失敗しました’,
message: error.message
})
};
}
};
