const Parser = require(‘rss-parser’);

const parser = new Parser({
timeout: 5000,
customFields: {
item: [‘description’, ‘content:encoded’, ‘pubDate’, ‘dc:date’]
}
});

// B1クラブと日本代表のRSSフィード
const RSS_FEEDS = [
{
id: ‘japan’,
name: ‘日本代表’,
url: ‘https://www.japanbasketball.jp/feed/’,
teamId: ‘japan’
},
{
id: ‘chiba’,
name: ‘千葉ジェッツ’,
url: ‘https://chibajets.jp/feed/’,
teamId: ‘chiba’
},
{
id: ‘alvark’,
name: ‘アルバルク東京’,
url: ‘https://www.alvark-tokyo.jp/feed/’,
teamId: ‘alvark’
},
{
id: ‘utsunomiya’,
name: ‘宇都宮ブレックス’,
url: ‘https://www.brex.jp/feed/’,
teamId: ‘utsunomiya’
},
{
id: ‘kawasaki’,
name: ‘川崎ブレイブサンダース’,
url: ‘https://www.kawasaki-brave-thunders.com/feed/’,
teamId: ‘kawasaki’
},
{
id: ‘ryukyu’,
name: ‘琉球ゴールデンキングス’,
url: ‘https://goldenkings.jp/feed/’,
teamId: ‘ryukyu’
},
{
id: ‘nagoya’,
name: ‘名古屋ダイヤモンドドルフィンズ’,
url: ‘https://www.nagoya-dolphins.jp/feed/’,
teamId: ‘nagoya’
},
{
id: ‘osaka’,
name: ‘大阪エヴェッサ’,
url: ‘https://evessa.com/feed/’,
teamId: ‘osaka’
},
{
id: ‘shimane’,
name: ‘島根スサノオマジック’,
url: ‘https://www.susanoo-m.com/feed/’,
teamId: ‘shimane’
},
{
id: ‘hiroshima’,
name: ‘広島ドラゴンフライズ’,
url: ‘https://www.hiroshima-dragonflies.com/feed/’,
teamId: ‘hiroshima’
}
];

async function fetchFeed(feed) {
try {
const parsedFeed = await parser.parseURL(feed.url);

```
return parsedFeed.items.slice(0, 10).map((item, index) => {
  // 日付の取得
  let date = new Date();
  if (item.pubDate) {
    date = new Date(item.pubDate);
  } else if (item.isoDate) {
    date = new Date(item.isoDate);
  }
  
  // 説明文の取得とクリーンアップ
  let excerpt = '';
  if (item.contentSnippet) {
    excerpt = item.contentSnippet;
  } else if (item.content) {
    excerpt = item.content.replace(/<[^>]*>/g, '');
  } else if (item.description) {
    excerpt = item.description.replace(/<[^>]*>/g, '');
  }
  
  excerpt = excerpt.substring(0, 150).trim() + '...';
  
  return {
    id: `${feed.id}-${index}-${Date.now()}`,
    team: feed.teamId,
    teamName: feed.name,
    title: item.title || 'タイトルなし',
    date: date.toISOString().split('T')[0],
    source: `${feed.name}公式`,
    url: item.link || '#',
    excerpt: excerpt
  };
});
```

} catch (error) {
console.error(`Error fetching ${feed.name}:`, error.message);
return [];
}
}

exports.handler = async (event, context) => {
// CORSヘッダーを設定
const headers = {
‘Access-Control-Allow-Origin’: ‘*’,
‘Access-Control-Allow-Headers’: ‘Content-Type’,
‘Access-Control-Allow-Methods’: ‘GET, OPTIONS’,
‘Content-Type’: ‘application/json’,
‘Cache-Control’: ‘public, max-age=300’
};

// OPTIONSリクエスト（プリフライト）への対応
if (event.httpMethod === ‘OPTIONS’) {
return {
statusCode: 200,
headers,
body: ‘’
};
}

try {
console.log(‘Starting RSS feed fetch…’);

```
const allNews = [];

// 全フィードを並行取得（タイムアウト付き）
const feedPromises = RSS_FEEDS.map(feed => 
  Promise.race([
    fetchFeed(feed),
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), 8000)
    )
  ]).catch(err => {
    console.error(`Failed to fetch ${feed.name}:`, err.message);
    return [];
  })
);

const results = await Promise.all(feedPromises);
results.forEach(news => {
  if (Array.isArray(news)) {
    allNews.push(...news);
  }
});

console.log(`Fetched ${allNews.length} news items`);

// 日付でソート（新しい順）
allNews.sort((a, b) => new Date(b.date) - new Date(a.date));

return {
  statusCode: 200,
  headers,
  body: JSON.stringify({
    news: allNews,
    lastUpdated: new Date().toISOString(),
    count: allNews.length
  })
};
```

} catch (error) {
console.error(‘Error in handler:’, error);
return {
statusCode: 500,
headers,
body: JSON.stringify({
error: ‘ニュースの取得に失敗しました’,
message: error.message,
news: [],
lastUpdated: new Date().toISOString()
})
};
}
};