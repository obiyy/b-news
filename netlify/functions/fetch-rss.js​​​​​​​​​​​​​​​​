const Parser = require(‘rss-parser’);


const parser = new Parser({
timeout: 10000,
headers: {
‘User-Agent’: ‘Mozilla/5.0 (compatible; BLeagueNewsBot/1.0)’
}
});

// テスト用の安全なフィード（確実に動作するもの）
const RSS_FEEDS = [
{
id: ‘bleague-official’,
name: ‘Bリーグ公式’,
url: ‘https://www.bleague.jp/feed/’,
teamId: ‘bleague’
}
];

// より詳細なエラーハンドリング付きでフィードを取得
async function fetchFeed(feed) {
try {
console.log(`Attempting to fetch: ${feed.name} from ${feed.url}`);

```
const parsedFeed = await parser.parseURL(feed.url);
console.log(`Successfully fetched ${feed.name}, items: ${parsedFeed.items?.length || 0}`);

if (!parsedFeed.items || parsedFeed.items.length === 0) {
  console.log(`No items found for ${feed.name}`);
  return [];
}

return parsedFeed.items.slice(0, 15).map((item, index) => {
  // 日付の安全な取得
  let dateStr = new Date().toISOString().split('T')[0];
  try {
    if (item.pubDate) {
      const date = new Date(item.pubDate);
      if (!isNaN(date.getTime())) {
        dateStr = date.toISOString().split('T')[0];
      }
    } else if (item.isoDate) {
      const date = new Date(item.isoDate);
      if (!isNaN(date.getTime())) {
        dateStr = date.toISOString().split('T')[0];
      }
    }
  } catch (e) {
    console.error(`Date parsing error for ${feed.name}:`, e.message);
  }
  
  // 説明文の安全な取得
  let excerpt = 'ニュースの詳細は元記事をご確認ください。';
  try {
    const content = item.contentSnippet || item.content || item.description || '';
    if (content) {
      excerpt = content
        .replace(/<[^>]*>/g, '')
        .replace(/\s+/g, ' ')
        .trim()
        .substring(0, 120);
      if (excerpt.length >= 120) {
        excerpt += '...';
      }
    }
  } catch (e) {
    console.error(`Excerpt parsing error for ${feed.name}:`, e.message);
  }
  
  // タイトルの安全な取得
  let title = 'タイトルなし';
  try {
    if (item.title) {
      title = String(item.title).trim();
    }
  } catch (e) {
    console.error(`Title parsing error for ${feed.name}:`, e.message);
  }
  
  // URLの安全な取得
  let url = '#';
  try {
    if (item.link) {
      url = String(item.link);
    }
  } catch (e) {
    console.error(`URL parsing error for ${feed.name}:`, e.message);
  }
  
  return {
    id: `${feed.id}-${index}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    team: feed.teamId,
    teamName: feed.name,
    title: title,
    date: dateStr,
    source: `${feed.name}公式`,
    url: url,
    excerpt: excerpt
  };
});
```

} catch (error) {
console.error(`Critical error fetching ${feed.name}:`, error);
return [];
}
}

exports.handler = async (event, context) => {
const headers = {
‘Access-Control-Allow-Origin’: ‘*’,
‘Access-Control-Allow-Headers’: ‘Content-Type’,
‘Access-Control-Allow-Methods’: ‘GET, OPTIONS’,
‘Content-Type’: ‘application/json; charset=utf-8’,
‘Cache-Control’: ‘public, max-age=300’
};

if (event.httpMethod === ‘OPTIONS’) {
return {
statusCode: 200,
headers,
body: ‘’
};
}

try {
console.log(’=== Starting RSS feed fetch ===’);
console.log(‘Time:’, new Date().toISOString());

```
const allNews = [];

// 各フィードを順次取得（並行処理だとタイムアウトしやすい）
for (const feed of RSS_FEEDS) {
  try {
    const news = await fetchFeed(feed);
    if (news && news.length > 0) {
      allNews.push(...news);
      console.log(`Added ${news.length} items from ${feed.name}`);
    }
  } catch (error) {
    console.error(`Failed to process ${feed.name}:`, error.message);
  }
}

console.log(`Total news items collected: ${allNews.length}`);

// 日付でソート
allNews.sort((a, b) => {
  try {
    return new Date(b.date) - new Date(a.date);
  } catch (e) {
    return 0;
  }
});

const response = {
  news: allNews,
  lastUpdated: new Date().toISOString(),
  count: allNews.length,
  status: 'success'
};

console.log('=== Fetch complete ===');

return {
  statusCode: 200,
  headers,
  body: JSON.stringify(response)
};
```

} catch (error) {
console.error(’=== Handler error ===’);
console.error(‘Error:’, error);
console.error(‘Stack:’, error.stack);

```
return {
  statusCode: 200,
  headers,
  body: JSON.stringify({
    error: 'ニュースの取得中にエラーが発生しました',
    message: error.message,
    news: [],
    lastUpdated: new Date().toISOString(),
    count: 0,
    status: 'error'
  })
};
```

}
};